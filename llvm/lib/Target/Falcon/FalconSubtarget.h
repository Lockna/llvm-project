//===-- FalconSubtarget.h - Define Subtarget for the Falcon -----*- C++ -*-===//
//
// Part of the LLVM fork for the Mirage project, under the Apache License v2.0
// with LLVM Exceptions. See https://llvm.org/LICENSE.txt for license
// information.
// SPDX-License-Identifier: Apache-2.0 with LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the Falcon-specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_TARGET_FALCON_SUBTARGET_H
#define LLVM_TARGET_FALCON_SUBTARGET_H

#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#include "FalconFrameLowering.h"
#include "FalconISelLowering.h"
#include "FalconInstrInfo.h"

#define GET_SUBTARGETINFO_HEADER
#include "FalconGenSubtargetInfo.inc"

namespace llvm {

/// A specific Falcon target MCU.
class FalconSubtarget : public FalconGenSubtargetInfo {
public:
  FalconSubtarget(const Triple &TT, const std::string &CPU,
                  const std::string &FS, const TargetMachine &TM);

  const FalconInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const FalconRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const FalconTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  /// Parses a subtarget feature string, setting appropriate options.
  /// \note Definition of function is auto-generated by `tblgen`.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  FalconSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                   const TargetMachine &TM);

  // Subtarget feature getters.
  // See Falcon.td for details.
  bool hasSCP() const { return HasSCP; }

private:
  virtual void anchor();

  // Subtarget feature settings
  // See Falcon.td for details.
  bool HasSCP;

  FalconInstrInfo InstrInfo;
  FalconFrameLowering FrameLowering;
  FalconTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;
};

} // end namespace llvm

#endif // LLVM_TARGET_FALCON_SUBTARGET_H
